name: CI

on: 
  push:
  pull_request:

jobs:
  format:
    uses: Geode-solutions/actions/.github/workflows/format.yml@master
    secrets:
      TOKEN: ${{ secrets.TOKEN }}
      
  build-ubuntu:
    runs-on: ubuntu-18.04
    container: "geodesolutions/ubuntu"
    needs: format
    strategy:
      matrix:
        python: [3.7, 3.8]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Cache node modules
      uses: actions/cache@v1.2.0
      with:
        path: node_modules
        key: node-ubuntu-${{ matrix.python }}-${{ hashFiles('package-lock.json') }}
    - name: Compile
      run: |
        npm install
        npm run package -- version ubuntu
    - name: Notify slack
      if: failure() && github.ref == 'refs/heads/master'
      uses: 8398a7/action-slack@v2
      with:
        status: failure
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}    

  build-ubuntu-wheel:
    runs-on: ubuntu-latest
    container: "ghcr.io/geode-solutions/centos:master"
    needs: format
    strategy:
      matrix:
        config:
        - {python: 3.7, tag: "cp37-cp37m"}
        - {python: 3.8, tag: "cp38-cp38"}

    steps:
    - uses: actions/checkout@v3
    - name: Cache node modules
      uses: actions/cache@v1.2.0
      with:
        path: node_modules
        key: node-centos-${{ matrix.config.python }}-${{ hashFiles('package-lock.json') }}
    - uses: Geode-solutions/actions/get-release@master
      id: opengeode
      with:
        repository: OpenGeode
        file: '-rhel-private.tar.gz'
        token: ${{ secrets.TOKEN }}
    - name: Compile
      run: |
        export PATH=/opt/python/${{ matrix.config.tag }}/bin:$PATH
        python -m pip install wheel
        export Python3_ROOT_DIR=/opt/python/${{ matrix.config.tag }}
        npm config set cmake_PYTHON_VERSION ${{ matrix.config.python }}
        npm config set cmake_CMAKE_PREFIX_PATH ${{ steps.opengeode.outputs.path }}
        npm install
        npm run wheel
    - name: Notify slack
      if: failure() && github.ref == 'refs/heads/master'
      uses: 8398a7/action-slack@v2
      with:
        status: failure
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}    

  build-windows:
    runs-on: windows-2019
    needs: format
    strategy:
      matrix:
        python: [3.7, 3.8]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Cache node modules
      uses: actions/cache@v1.2.0
      with:
        path: node_modules
        key: node-win64-${{ matrix.python }}-${{ hashFiles('package-lock.json') }}
    - uses: Geode-solutions/actions/get-release@master
      id: opengeode
      with:
        repository: OpenGeode
        file: '-win64.zip'
        token: ${{ secrets.TOKEN }}
    - name: Compile
      run: |
        pip install wheel
        npm config set cmake_PYTHON_VERSION ${{ matrix.python }}
        npm config set cmake_CMAKE_PREFIX_PATH ${{ steps.opengeode.outputs.path }}
        npm install
        npm run package -- version win64
        npm run wheel
      env:
        Python3_ROOT_DIR: ${{ env.pythonLocation }}
    - name: Notify slack
      if: failure() && github.ref == 'refs/heads/master'
      uses: 8398a7/action-slack@v2
      with:
        status: failure
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
  semantic-release:
    runs-on: ubuntu-18.04
    needs: [build-ubuntu, build-ubuntu-wheel, build-windows]
    steps:
    - uses: actions/checkout@v1
    - run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
